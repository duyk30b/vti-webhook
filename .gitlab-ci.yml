image: gitlab/dind

variables:
  DOCKER_DRIVER: overlay
  IMAGE_NAME: $PRIVATE_REGISTRY_HOST/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  SERVICE_PATH: ~/app/source/services
  SERVICE_NAME: webhook-service

services:
  - docker:dind

stages:
  - build_develop
  - deploy_develop
  - build_staging
  - deploy_staging
  - build_demo
  - deploy_demo
  - build_pkg
  - clean

before_script:
  - docker login $PRIVATE_REGISTRY_HOST -u $PRIVATE_REGISTRY_USERNAME -p $PRIVATE_REGISTRY_PASSWD
  - echo "Build Image $IMAGE_NAME/$CI_COMMIT_REF_SLUG"

build_pkg:
  stage: build_pkg
  script:
    - docker build --tag $IMAGE_NAME:$CI_COMMIT_TAG -f Dockerfile.package .
    - docker push $IMAGE_NAME:$CI_COMMIT_TAG
  only:
    - tags

build_develop:
  stage: build_develop
  script:
    - docker build --tag $IMAGE_NAME:$CI_COMMIT_REF_SLUG .
    - docker push $IMAGE_NAME:$CI_COMMIT_REF_SLUG
  only:
    - develop

deploy_develop:
  stage: deploy_develop
  variables:
    GIT_STRATEGY: none
  only:
    - develop
  script:
    - eval `ssh-agent -s`

    - bash -c 'echo "$DEVELOP_SERVER_SSH_KEY" | ssh-add -'
    - mkdir -p ~/.ssh

    - ssh-keyscan -H $DEVELOP_SERVER_IP >> ~/.ssh/known_hosts

    - chmod 644 ~/.ssh/known_hosts

    - >
      ssh $DEVELOP_SERVER_USERNAME@$DEVELOP_SERVER_IP
      "docker login ${PRIVATE_REGISTRY_HOST} -u ${PRIVATE_REGISTRY_USERNAME} -p ${PRIVATE_REGISTRY_PASSWD};
      ls -la;
      cd ${SERVICE_PATH};
      mkdir -p ${SERVICE_NAME};
      cd ${SERVICE_NAME};
      pwd;
      docker pull ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG};
      docker create --name ${SERVICE_NAME}_temp ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG};
      docker cp ${SERVICE_NAME}_temp:./docker-compose.production.yml ./;
      ls -la;
      docker rm -f ${SERVICE_NAME}_temp;
      docker-compose -f docker-compose.production.yml down;
      docker-compose -f docker-compose.production.yml up -d;
      docker image prune -f;"

build_staging:
  stage: build_staging
  script:
    - docker build --tag $IMAGE_NAME:$CI_COMMIT_REF_SLUG .
    - docker push $IMAGE_NAME:$CI_COMMIT_REF_SLUG
  only:
    - staging

deploy_staging:
  stage: deploy_staging
  variables:
    GIT_STRATEGY: none
  only:
    - staging
  script:
    - eval `ssh-agent -s`

    - bash -c 'echo "$SSH_PRIVATE_KEY" | ssh-add -'
    - mkdir -p ~/.ssh

    - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts

    - mkdir -p ~/.ssh

    - chmod 644 ~/.ssh/known_hosts

    - >
      ssh $SSH_STAGING_USER@$SSH_STAGING_SERVER_IP
      "docker login ${PRIVATE_REGISTRY_HOST} -u ${PRIVATE_REGISTRY_USERNAME} -p ${PRIVATE_REGISTRY_PASSWD};
      ls -la;
      cd ${SERVICE_PATH};
      mkdir -p ${SERVICE_NAME};
      cd ${SERVICE_NAME};
      pwd;
      docker pull ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG};
      docker create --name ${SERVICE_NAME}_temp ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG};
      docker cp ${SERVICE_NAME}_temp:./docker-compose.production.yml ./;
      ls -la;
      docker rm -f ${SERVICE_NAME}_temp;
      docker-compose -f docker-compose.production.yml down;
      docker-compose -f docker-compose.production.yml up -d;
      docker image prune -f;"

build_demo:
  before_script:
    - docker version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - ls -la
    - chmod +x ./setup_env_demo.sh
    - ./setup_env_demo.sh
    - echo "$PRIVATE_REGISTRY_HOST/$PRIVATE_REGISTRY_USERNAME/$PRIVATE_REGISTRY_PASSWD"
    - echo "$SSH_USER/$SSH_SERVER_IP"
    - echo "$SSH_PRIVATE_KEY"
  stage: build_demo
  script:
    - docker pull $IMAGE_NAME:latest || true
    - docker build --cache-from $IMAGE_NAME:latest --tag $IMAGE_NAME:latest --tag $IMAGE_NAME:$CI_COMMIT_REF_SLUG .
    - docker push $IMAGE_NAME:$CI_COMMIT_REF_SLUG
    - docker push $IMAGE_NAME:latest
  only:
    - master

deploy_demo:
  stage: deploy_demo
  variables:
    GIT_STRATEGY: none
  only:
    - master

  script:
    - eval `ssh-agent -s`

    - bash -c 'echo "$SSH_PRIVATE_KEY" | ssh-add -'
    - mkdir -p ~/.ssh

    - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts

    - mkdir -p ~/.ssh

    - chmod 644 ~/.ssh/known_hosts

    - >
      ssh $SSH_USER@$SSH_SERVER_IP
      "docker login ${PRIVATE_REGISTRY_HOST} -u ${PRIVATE_REGISTRY_USERNAME} -p ${PRIVATE_REGISTRY_PASSWD};
      cd ${PATH_TO_DEMO_PROJECT};
      docker pull ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG};
      docker-compose down;
      docker-compose -f docker-compose.production.yml up -d;
      docker image prune -f;"

clean:
  stage: clean
  script:
    - echo "docker system prune --all -f"
